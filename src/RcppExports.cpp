// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// makeSigma
arma::mat makeSigma(arma::vec sigma, int d);
RcppExport SEXP _mvnbart7_makeSigma(SEXP sigmaSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSigma(sigma, d));
    return rcpp_result_gen;
END_RCPP
}
// makeSigmaInv
arma::vec makeSigmaInv(arma::mat& Sigma);
RcppExport SEXP _mvnbart7_makeSigmaInv(SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSigmaInv(Sigma));
    return rcpp_result_gen;
END_RCPP
}
// wishart_loglikelihood
double wishart_loglikelihood(const arma::mat& X, const arma::mat& Sigma, double nu);
RcppExport SEXP _mvnbart7_wishart_loglikelihood(SEXP XSEXP, SEXP SigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(wishart_loglikelihood(X, Sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// iwishart_loglikelihood
double iwishart_loglikelihood(const arma::mat& X, const arma::mat& Sigma, double nu);
RcppExport SEXP _mvnbart7_iwishart_loglikelihood(SEXP XSEXP, SEXP SigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(iwishart_loglikelihood(X, Sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// log_dmvn
double log_dmvn(arma::vec& x, arma::mat& Sigma);
RcppExport SEXP _mvnbart7_log_dmvn(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dmvn(x, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// cppbart
Rcpp::List cppbart(arma::mat x_train, arma::mat y_mat, arma::mat x_test, arma::mat x_cut, int n_tree, int node_min_size, int n_mcmc, int n_burn, arma::mat Sigma_init, arma::vec mu_init, arma::vec sigma_mu, double alpha, double beta, double nu, arma::mat S_0_wish, arma::vec A_j_vec, bool update_Sigma, bool var_selection_bool, bool sv_bool, arma::mat sv_matrix);
RcppExport SEXP _mvnbart7_cppbart(SEXP x_trainSEXP, SEXP y_matSEXP, SEXP x_testSEXP, SEXP x_cutSEXP, SEXP n_treeSEXP, SEXP node_min_sizeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP Sigma_initSEXP, SEXP mu_initSEXP, SEXP sigma_muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP S_0_wishSEXP, SEXP A_j_vecSEXP, SEXP update_SigmaSEXP, SEXP var_selection_boolSEXP, SEXP sv_boolSEXP, SEXP sv_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_mat(y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_cut(x_cutSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_0_wish(S_0_wishSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A_j_vec(A_j_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type update_Sigma(update_SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type var_selection_bool(var_selection_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type sv_bool(sv_boolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sv_matrix(sv_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppbart(x_train, y_mat, x_test, x_cut, n_tree, node_min_size, n_mcmc, n_burn, Sigma_init, mu_init, sigma_mu, alpha, beta, nu, S_0_wish, A_j_vec, update_Sigma, var_selection_bool, sv_bool, sv_matrix));
    return rcpp_result_gen;
END_RCPP
}
// cppbart_uni
Rcpp::List cppbart_uni(arma::mat x_train, arma::mat y_mat, arma::mat x_test, arma::mat x_cut, int n_tree, int node_min_size, int n_mcmc, int n_burn, arma::mat Sigma_init, arma::vec mu_init, arma::vec sigma_mu, double alpha, double beta, double nu, arma::mat S_0_wish, arma::vec A_j_vec, bool update_Sigma, bool var_selection_bool, bool sv_bool, arma::mat sv_matrix);
RcppExport SEXP _mvnbart7_cppbart_uni(SEXP x_trainSEXP, SEXP y_matSEXP, SEXP x_testSEXP, SEXP x_cutSEXP, SEXP n_treeSEXP, SEXP node_min_sizeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP Sigma_initSEXP, SEXP mu_initSEXP, SEXP sigma_muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP nuSEXP, SEXP S_0_wishSEXP, SEXP A_j_vecSEXP, SEXP update_SigmaSEXP, SEXP var_selection_boolSEXP, SEXP sv_boolSEXP, SEXP sv_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_mat(y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_cut(x_cutSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_0_wish(S_0_wishSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A_j_vec(A_j_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type update_Sigma(update_SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type var_selection_bool(var_selection_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type sv_bool(sv_boolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sv_matrix(sv_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppbart_uni(x_train, y_mat, x_test, x_cut, n_tree, node_min_size, n_mcmc, n_burn, Sigma_init, mu_init, sigma_mu, alpha, beta, nu, S_0_wish, A_j_vec, update_Sigma, var_selection_bool, sv_bool, sv_matrix));
    return rcpp_result_gen;
END_RCPP
}
// truncated_sample
double truncated_sample(double mu, bool left, double sigma_);
RcppExport SEXP _mvnbart7_truncated_sample(SEXP muSEXP, SEXP leftSEXP, SEXP sigma_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< bool >::type left(leftSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_(sigma_SEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_sample(mu, left, sigma_));
    return rcpp_result_gen;
END_RCPP
}
// cppbart_CLASS
Rcpp::List cppbart_CLASS(arma::mat x_train, arma::mat y_mat, arma::mat x_test, arma::mat x_cut, int n_tree, int node_min_size, int n_mcmc, int n_burn, arma::mat Sigma_init, arma::vec mu_init, arma::vec sigma_mu, double nu, double alpha, double beta, unsigned int m, bool update_sigma, bool var_selection_bool, bool tn_sampler, bool sv_bool, arma::mat sv_matrix);
RcppExport SEXP _mvnbart7_cppbart_CLASS(SEXP x_trainSEXP, SEXP y_matSEXP, SEXP x_testSEXP, SEXP x_cutSEXP, SEXP n_treeSEXP, SEXP node_min_sizeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP Sigma_initSEXP, SEXP mu_initSEXP, SEXP sigma_muSEXP, SEXP nuSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP mSEXP, SEXP update_sigmaSEXP, SEXP var_selection_boolSEXP, SEXP tn_samplerSEXP, SEXP sv_boolSEXP, SEXP sv_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_mat(y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_cut(x_cutSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sigma(update_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type var_selection_bool(var_selection_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type tn_sampler(tn_samplerSEXP);
    Rcpp::traits::input_parameter< bool >::type sv_bool(sv_boolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sv_matrix(sv_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppbart_CLASS(x_train, y_mat, x_test, x_cut, n_tree, node_min_size, n_mcmc, n_burn, Sigma_init, mu_init, sigma_mu, nu, alpha, beta, m, update_sigma, var_selection_bool, tn_sampler, sv_bool, sv_matrix));
    return rcpp_result_gen;
END_RCPP
}
// cppbart_CLASS_uni
Rcpp::List cppbart_CLASS_uni(arma::mat x_train, arma::mat y_mat, arma::mat x_test, arma::mat x_cut, int n_tree, int node_min_size, int n_mcmc, int n_burn, arma::mat Sigma_init, arma::vec mu_init, arma::vec sigma_mu, double nu, double alpha, double beta, unsigned int m, bool update_sigma, bool var_selection_bool, bool tn_sampler, bool sv_bool, arma::mat sv_matrix);
RcppExport SEXP _mvnbart7_cppbart_CLASS_uni(SEXP x_trainSEXP, SEXP y_matSEXP, SEXP x_testSEXP, SEXP x_cutSEXP, SEXP n_treeSEXP, SEXP node_min_sizeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP Sigma_initSEXP, SEXP mu_initSEXP, SEXP sigma_muSEXP, SEXP nuSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP mSEXP, SEXP update_sigmaSEXP, SEXP var_selection_boolSEXP, SEXP tn_samplerSEXP, SEXP sv_boolSEXP, SEXP sv_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_mat(y_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_cut(x_cutSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type update_sigma(update_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type var_selection_bool(var_selection_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type tn_sampler(tn_samplerSEXP);
    Rcpp::traits::input_parameter< bool >::type sv_bool(sv_boolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sv_matrix(sv_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(cppbart_CLASS_uni(x_train, y_mat, x_test, x_cut, n_tree, node_min_size, n_mcmc, n_burn, Sigma_init, mu_init, sigma_mu, nu, alpha, beta, m, update_sigma, var_selection_bool, tn_sampler, sv_bool, sv_matrix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvnbart7_makeSigma", (DL_FUNC) &_mvnbart7_makeSigma, 2},
    {"_mvnbart7_makeSigmaInv", (DL_FUNC) &_mvnbart7_makeSigmaInv, 1},
    {"_mvnbart7_wishart_loglikelihood", (DL_FUNC) &_mvnbart7_wishart_loglikelihood, 3},
    {"_mvnbart7_iwishart_loglikelihood", (DL_FUNC) &_mvnbart7_iwishart_loglikelihood, 3},
    {"_mvnbart7_log_dmvn", (DL_FUNC) &_mvnbart7_log_dmvn, 2},
    {"_mvnbart7_cppbart", (DL_FUNC) &_mvnbart7_cppbart, 20},
    {"_mvnbart7_cppbart_uni", (DL_FUNC) &_mvnbart7_cppbart_uni, 20},
    {"_mvnbart7_truncated_sample", (DL_FUNC) &_mvnbart7_truncated_sample, 3},
    {"_mvnbart7_cppbart_CLASS", (DL_FUNC) &_mvnbart7_cppbart_CLASS, 20},
    {"_mvnbart7_cppbart_CLASS_uni", (DL_FUNC) &_mvnbart7_cppbart_CLASS_uni, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvnbart7(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
